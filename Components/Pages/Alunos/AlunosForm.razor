@page "/aluno-form"
@page "/aluno-form/{Id:int}"
@using BlzFluentUICrud.Entities
@rendermode InteractiveServer

<PageTitle>
    @pageTitle
</PageTitle>

<FluentGrid Justify="@JustifyContent.Center">
    <FluentGridItem>
        <FluentCard>
            <FluentLabel Alignment="HorizontalAlignment.Center">
                @pageTitle
            </FluentLabel>

            <EditForm Model="Aluno">
                <FluentTextField Appearance="FluentInputAppearance.Filled"
                    Label="Aluno" @bind-Value="Aluno!.Nome" Style="width:100%"/>

                <FluentTextField Appearance="FluentInputAppearance.Filled"
                                 Label="Email" @bind-Value="Aluno!.Email" Style="width:100%" />

                <FluentNumberField Appearance="FluentInputAppearance.Filled"
                                 Label="Idade" @bind-Value="Aluno!.Idade" Style="width:100%" />

                <FluentTextField Appearance="FluentInputAppearance.Filled"
                                 Label="Foto" @bind-Value="Aluno!.Foto" Style="width:100%" />

                <FluentButton Appearance="Appearance.Accent" OnClick="() => SaveAluno()">
                    @pageTitle
                </FluentButton>

                <FluentAnchor Href="/alunos">Cancelar</FluentAnchor>
            </EditForm>
        </FluentCard>
    </FluentGridItem>
</FluentGrid>

@code {
    [Parameter]
    public int? Id { get; set; } = -1;

    private string pageTitle => Id != null ? "Editar Aluno" : "Novo Aluno";

    [SupplyParameterFromForm]
    public Aluno? Aluno { get; set; } = new Aluno();

    protected override async Task OnInitializedAsync()
    {
        if(Id is null)
        {
            Aluno = new Aluno();
        }
        else
        {
            Aluno = await _alunoService.GetAluno(Id);
        }

        await base.OnInitializedAsync();
    }

    private async Task SaveAluno()
    {
        if(Id != null)
        {
            await _alunoService.UpdateAluno(Aluno!);
            DialogService.ShowSuccess($"Aluno {Aluno!.Nome} atualizado com sucesso");
        }
        else
        {
            await _alunoService.AddAluno(Aluno!);
            DialogService.ShowSuccess($"Aluno {Aluno!.Nome} incluido com sucesso");            
        }

        ToastService.ShowInfo("Retornado para lista de alunos");
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/alunos");

    }
}
