@page "/alunos"
@using BlzFluentUICrud.Entities
@rendermode InteractiveServer

@if(alunos == null)
{
    <FluentProgressRing Style="width:30px;height:30px;"/>
}
else
{
    <FluentStack HorizontalAlignment="HorizontalAlignment.End">
        <FluentAnchor Href="/aluno-form"
            IconStart="@(new Icons.Regular.Size24.PersonAdd().WithColor(Color.Success))">
        Novo Aluno
        </FluentAnchor>
    </FluentStack>

    <div class="grid">
        <FluentDataGrid Id="alunogrid" Items="@alunos" TGridItem="Aluno" Pagination="@pagination">
            <TemplateColumn Title="Avatar" Align="Align.Start">
                @if(context.Foto is not null)
                {
                    <FluentPersona ImageSize="50px" Image="@context.Foto"/>
                }
                else
                {
                    <FluentPersona ImageSize="50px" Initials="@context!.Nome[0]!.ToString().ToUpper()"/>
                }
            </TemplateColumn>
            <PropertyColumn Title="Nome" Property="@(c => c!.Nome)" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Email" Property="@(c => c!.Email)" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Idade" Property="@(c => c!.Idade)" Sortable="true" Align="Align.Center" />
            <TemplateColumn Align="@Align.End">
                <FluentButton Appearance="Appearance.Outline" OnClick="() => ConfirmarExclusao(context.Id)"
                    IconStart="@(new Icons.Regular.Size24.Delete().WithColor(Color.Error))">Excluir</FluentButton>
                <FluentAnchor IconStart="@(new Icons.Regular.Size24.Edit().WithColor(Color.Success))"
                Appearance="Appearance.Outline"
                Href="@($"/aluno-form/{context.Id}")">Editar</FluentAnchor>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
    <br />

    <div class="page-buttons">

        @if(pagination.TotalItemCount.HasValue)
        {
            for(var pageIndex = 0; pageIndex <= pagination.LastPageIndex;pageIndex++)
            {
                var capturedIndex = pageIndex;

                <FluentButton @onclick="@(() => GoToPageAsync(capturedIndex))"
                    Appearance="@PageButtonAppearance(capturedIndex)"
                    aria-current="@AriaCurrentValue(capturedIndex)"
                    aria-label="@AriaLabel(capturedIndex + 1)">
                    @(capturedIndex + 1)

                </FluentButton>
            }
        }
    </div>    
}

@code {
    private IQueryable<Aluno>? alunos;

    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(1000);
        await CarregarAlunos();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task CarregarAlunos()
    {
        var alunoList = await _alunoService.GetAlunos();
        alunos = alunoList?.AsQueryable();
    }

    private async Task ConfirmarExclusao(int id)
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Confirma exclusao do aluno de id = {id} ?",
        "Sim", "Não", "Excluir Aluno");

        var result = await dialog.Result;

        if(!result.Cancelled)
        {
            await Excluir(id);
        }
        else
        {
            ToastService.ShowInfo("Operacao cancelada");
        }
    }

    private async Task Excluir(int id)
    {
        var aluno = await _alunoService.GetAluno(id);

        if(aluno is null)
        {
            ToastService.ShowError("Aluno nao encontrado");
            return;
        }

        var result = await _alunoService.DeleteAluno(aluno.Id);

        if(result is not null)
        {
            ToastService.ShowSuccess("Aluno excluido com sucesso");
            await CarregarAlunos();
        }
        else
        {
            ToastService.ShowSuccess("Nao foi possivel excluir o aluno");
        }
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private Appearance PageButtonAppearance(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private string AriaLabel(int pageIndex) => $"Ir para pag. {pageIndex}";



}